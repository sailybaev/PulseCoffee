generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String?  @unique
  phoneNumber  String   @unique
  name         String
  passwordHash String
  role         UserRole @default(CLIENT)
  branchId     String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]
  Branch       Branch?  @relation(fields: [branchId], references: [id])
}

model Branch {
  id              String            @id @default(uuid())
  name            String
  address         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  orders          Order[]
  ProductInBranch ProductInBranch[]
  User            User[]
  devices         Device[]
}

model Product {
  id              String                 @id @default(uuid())
  name            String
  description     String?
  basePrice       Float // Base price in KZT (Kazakhstani Tenge)
  category        ProductCategory        @default(COFFEE)
  imageUrl        String? // URL to the product image
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  orderItems      OrderItem[]
  ProductInBranch ProductInBranch[]
  customizations  ProductCustomization[]
}

model Order {
  id           String      @id @default(uuid())
  userId       String? // Made optional for public tablet orders
  branchId     String
  status       OrderStatus @default(PENDING)
  total        Float // Total amount in KZT (Kazakhstani Tenge)
  customerName String? // Customer name for public tablet orders
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  branch       Branch      @relation(fields: [branchId], references: [id])
  user         User?       @relation(fields: [userId], references: [id])
  items        OrderItem[]
}

model OrderItem {
  id             String                   @id @default(uuid())
  orderId        String
  productId      String
  quantity       Int
  price          Float // Price per item in KZT (Kazakhstani Tenge)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime
  order          Order                    @relation(fields: [orderId], references: [id])
  product        Product                  @relation(fields: [productId], references: [id])
  customizations OrderItemCustomization[]
}

model ProductInBranch {
  id          String   @id
  productId   String
  branchId    String
  price       Float // Branch-specific price in KZT (Kazakhstani Tenge)
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Branch      Branch   @relation(fields: [branchId], references: [id])
  Product     Product  @relation(fields: [productId], references: [id])

  @@unique([productId, branchId])
}

model ProductCustomization {
  id                      String                   @id @default(uuid())
  productId               String
  type                    CustomizationType
  name                    String
  price                   Float                    @default(0) // Additional price in KZT (Kazakhstani Tenge)
  isAvailable             Boolean                  @default(true)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  product                 Product                  @relation(fields: [productId], references: [id])
  orderItemCustomizations OrderItemCustomization[]

  @@unique([productId, type, name])
}

model OrderItemCustomization {
  id                     String               @id @default(uuid())
  orderItemId            String
  productCustomizationId String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  orderItem              OrderItem            @relation(fields: [orderItemId], references: [id])
  productCustomization   ProductCustomization @relation(fields: [productCustomizationId], references: [id])
}

model Device {
  id         String   @id @default(uuid())
  deviceId   String   @unique @map("device_id")
  branchId   String   @map("branch_id")
  deviceInfo Json?    @map("device_info")
  lastSeen   DateTime @default(now()) @map("last_seen")
  createdAt  DateTime @default(now()) @map("created_at")

  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@map("devices")
}

model AdminAction {
  id        String   @id @default(uuid())
  action    String
  deviceId  String?  @map("device_id")
  metadata  Json?
  timestamp DateTime @default(now())

  @@map("admin_actions")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum UserRole {
  CLIENT
  BARISTA
  ADMIN
}

enum ProductCategory {
  COFFEE
  TEA
  PASTRY
  SANDWICH
  SNACK
  COLD_DRINKS
  FRESH_JUICE
  HOT_BEVERAGES
  LEMONADES
  ADDITIVES
  OTHER
}

enum CustomizationType {
  CUP_SIZE
  MILK_TYPE
  SYRUP
  EXTRA_SHOT
  TEMPERATURE
  OTHER
}
